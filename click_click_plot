#!/usr/bin/env python


import sys
import os

from tkinter import *
from tkinter.ttk import *
from tkinter.colorchooser import askcolor
import matplotlib.pylab as plt
import matplotlib

matplotlib.use("TkAgg")
matplotlib.interactive(True)

def make_X11_color_map():
    """
    CIAO has colors.par which contains X11 color codes.  They are 
    normalized from 0:1.
    
    We need to convert these to hex values so we can compare with 
    hex values Tk returns.
    
    """
    
    from matplotlib.colors import is_color_like
    import paramio as pio
    pp = pio.paramopen("colors","r") # CIAO has colors.par
    
    colormap = {}
    colors = pio.plist(pp)
    for c in colors:
        if 'mode' == c:
            continue
            
        rgb_norm = pio.pget(pp,c).split()        
        byteval = [min(int(float(b)*256),255) for b in rgb_norm]
        h = [ "{:02x}".format(b) for b in byteval ]
        hexcode = "#"+"".join(h)

        if hexcode not in colormap and is_color_like(c) is True:
            colormap[hexcode] = c

    return colormap
    



class ClickClickPlotGui():


    def pick_col(self, txt, c0, cur=0):
        """Pick column from crate"""
        cols = tab.get_colnames(vectors=False,rawonly=False)
        _label = Label(self.window, text=txt)
        _label.grid(column=c0, row=self._row, padx=(5,5), pady=(5,5))

        col = Combobox(self.window, state="readonly")
        col['values']=cols
        col.current(cur) 
        col.grid(column=c0+1, row=self._row, padx=(5,5), pady=(5,5))
        return col


    def pick_columns(self):
        self.xcol = self.pick_col("X-axis",0, )
        self.ycol = self.pick_col("Y-axis",2, cur=1)


    def pick_scaling(self, txt, c0):
        """Pick axis scaling"""
        lab = Label(self.window, text=txt)
        lab.grid(column=c0,row=self._row, padx=(5,5), pady=(5,5))
        _scale = Combobox(self.window, state="readonly")
        _scale['values'] = ["linear", "log"]
        _scale.current(0)
        _scale.grid(column=c0+1,row=self._row, padx=(5,5), pady=(5,5))
        return _scale


    def pick_axes_scaling(self):
        self.x_scale = self.pick_scaling("X-axis scaling", 0)
        self.y_scale = self.pick_scaling("Y-axis scaling", 2)

        
    def pick_line_properties(self):
        """Set line properties"""
        _default_line_width=2
        
        lab = Label(self.window, text="Line Style")
        lab.grid(column=0, row=self._row, padx=(5,5), pady=(5,5))
        self.line_style = Combobox(self.window, state="readonly")
        self.line_style['values'] = [ "None", "solid", "dotted", "dashdot", "dashed" ]
        self.line_style.current(1)
        self.line_style.grid(column=1,row=self._row, padx=(5,5), pady=(5,5))
        
        lab = Label(self.window, text="Line Color")
        lab.grid(column=2, row=self._row, padx=(5,5), pady=(5,5))
        self.line_color = Button(self.window, text="#1f77b4", command=self.p_line)            
        self.line_color.grid(column=3,row=self._row, padx=(5,5), pady=(5,5))
        
        lab = Label(self.window, text="Line Width")
        lab.grid(column=4, row=self._row, padx=(5,5), pady=(5,5))
        v = StringVar(self.window)
        v.set(_default_line_width)
        self.line_width = Spinbox(self.window, from_=1, to=10, width=3)
        self.line_width.grid(column=5,row=self._row, padx=(5,5), pady=(5,5))
        if hasattr(self.line_width, "set"):
            self.line_width.set(_default_line_width)
        else:
            self.line_width.config(textvariable=v)


    def p_line(self):
        """Replace hex code with a nice name if one exists"""

        c = askcolor(color=self.line_color["text"],
            parent=self.window, title='Pick a line color')
        if c[1] in self.color_map:
            self.line_color["text"] = self.color_map[c[1]]
        else:
            self.line_color["text"] = c[1]


    def pick_marker_properties(self):
        """Set marker properties"""
        _default_marker_size=3

        lab = Label(self.window, text="Marker Style")
        lab.grid(column=0, row=self._row, padx=(5,5), pady=(5,5))
        self.marker_style = Combobox(self.window,state="readonly")
        self.marker_style['values'] = [ "none", "cross", "diamond",
                "downtriangle", "circle", "plus", "square", "point", 
                "uptriangle" ]
        self.marker_style.current(0)
        self.marker_style.grid(column=1,row=self._row, padx=(5,5), pady=(5,5))
        
        lab = Label(self.window, text="Marker Color")
        lab.grid(column=2, row=self._row, padx=(5,5), pady=(5,5))
        self.marker_color = Button(self.window, text="black", command=self.p_marker)            
        self.marker_color.grid(column=3,row=self._row, padx=(5,5), pady=(5,5))

        self.marker_color.grid(column=3,row=self._row, padx=(5,5), pady=(5,5))
        
        lab = Label(self.window, text="Marker Size")
        lab.grid(column=4, row=self._row, padx=(5,5), pady=(5,5))
        v = StringVar(self.window)
        v.set(_default_marker_size)
        self.marker_size = Spinbox(self.window, from_=1, to=10, width=3)
        self.marker_size.grid(column=5,row=self._row, padx=(5,5), pady=(5,5))
        if hasattr(self.marker_size, "set"):
            # Something diff between py3.5 and py3.7
            self.marker_size.set(_default_marker_size)
        else:
            self.marker_size.configure(textvariable=v)


    def p_marker(self):
        """Replace hex code with a nice name if one exists"""

        c = askcolor(color=self.marker_color["text"],
            parent=self.window, title='Pick a marker color')
        if c[1] in self.color_map:
            self.marker_color["text"] = self.color_map[c[1]]
        else:
            self.marker_color["text"] = c[1]


    def add_title(self):
        lab = Label(self.window, text="Plot Title")
        lab.grid(column=0, row=self._row, padx=(5,5), pady=(5,5))        
        self.title = Entry(self.window, width=50)
        self.title.insert(END, self.crate.get_filename())
        self.title.grid(column=1, columnspan=2, row=self._row, padx=(5,5), pady=(5,5)) 


    def add_xlabel(self):
        lab = Label(self.window, text="X Label")
        lab.grid(column=0, row=self._row, padx=(5,5), pady=(5,5))        
        self.xlabel = Entry(self.window, width=50)
        self.xlabel.grid(column=1, columnspan=2, row=self._row, padx=(5,5), pady=(5,5)) 
        self.set_xlabel()


    def set_xlabel(self, *args):        
        lab = self.xcol.get()
        col = self.crate.get_column(lab)
        units = col.unit        
        if units and len(units)>0:
            lab = "{} ({})".format(lab,units)
        
        self.xlabel.delete(0, END)
        self.xlabel.insert(END, lab)


    def add_ylabel(self):
        lab = Label(self.window, text="Y Label")
        lab.grid(column=0, row=self._row, padx=(5,5), pady=(5,5))        
        self.ylabel = Entry(self.window, width=50)
        self.ylabel.grid(column=1, columnspan=2, row=self._row, padx=(5,5), pady=(5,5)) 
        self.set_ylabel()


    def set_ylabel(self, *args):
        lab = self.ycol.get()
        col = self.crate.get_column(lab)
        units = col.unit        
        if units and len(units)>0:
            lab = "{} ({})".format(lab,units)

        self.ylabel.delete(0, END)
        self.ylabel.insert(END, lab)


    def add_buttons(self):
        btn = Button(self.window, text="Plot", command=self.make_plot)
        btn.grid(column=1, row=self._row, padx=(5,5), pady=(5,5))

        btn = Button(self.window, text="Clear", command=self.clear_plot)
        btn.grid(column=2, row=self._row, padx=(5,5), pady=(5,5))

        btn = Button(self.window, text="Quit", command=self.quit)
        btn.grid(column=3, row=self._row, padx=(5,5), pady=(5,5))


    @staticmethod
    def map_marker_names(face):
        """Map nice names to matplotlib token"""
        _valid = { "none": "None",  
                   "cross": "X", 
                   "diamond": "D", 
                   "downtriangle" : "v", 
                   "circle" : "o", 
                   "plus" : "+", 
                   "square" : "s",
                   "point" : ".", 
                   "uptriangle" : "^",
                   }
        assert face in _valid, "ERROR: Unknown marker style"
        return _valid[face]
        

    def next_row(self):
        self._row = self._row+1
        

    def __init__(self,tab):

        self.color_map = make_X11_color_map()

        window = Tk()
        s = Style(window)
        s.theme_use("clam")

        self.window=window
        self.crate = tab

        self.window.title("Click Click Plot")
        self.window.geometry('768x320')

        self._row=0
        self.pick_columns()
        
        self.next_row()
        self.pick_axes_scaling()
        
        self.next_row()
        self.pick_line_properties()

        self.next_row()
        self.pick_marker_properties()

        self.next_row()
        self.add_title()

        self.next_row()
        self.add_xlabel()
        self.next_row()
        self.add_ylabel()

        self.next_row()
        self.add_buttons()
        
        self.xcol.bind("<<ComboboxSelected>>", self.set_xlabel)
        self.ycol.bind("<<ComboboxSelected>>", self.set_ylabel)

        
    def make_plot(self):
        """
        These are the actual matplotlib commands        
        """
        xx=self.xcol.get()
        yy=self.ycol.get()
        
        xvals = self.crate.get_column(xx).values
        yvals = self.crate.get_column(yy).values
        plt.xlabel(self.xlabel.get())
        plt.ylabel(self.ylabel.get())
        plt.title(self.title.get())

        plt.plot( xvals, yvals,
            color=self.line_color["text"],
            linewidth=self.line_width.get(),
            linestyle=self.line_style.get(),
            mfc=self.marker_color["text"],
            mec=self.marker_color["text"],
            marker=self.map_marker_names(self.marker_style.get()),
            markersize=self.marker_size.get()
            )
        plt.xscale(self.x_scale.get())
        plt.yscale(self.y_scale.get())
        plt.show()

        
    def clear_plot(self):
        plt.clf()


    def run(self):
        self.window.mainloop()


    def quit(self):
        plt.close()
        sys.exit(0)



if __name__ == "__main__":
    
    assert len(sys.argv)==2, "Usage: click_click_plot infile"
    
    infile=sys.argv[1]
    #infile="pcadf072039163N004_asol1.fits"

    from pycrates import TABLECrate
    tab = TABLECrate(infile, mode="r")

    app = ClickClickPlotGui(tab)
    app.run()
